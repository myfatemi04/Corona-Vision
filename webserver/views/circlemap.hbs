<!DOCTYPE html>
<html>
	<head>
		<title>Corona Vision - Coronavirus Map</title>
		{{>styles}}

		{{!-- Mapbox --}}
		<link href='https://api.mapbox.com/mapbox-gl-js/v1.8.1/mapbox-gl.css' rel='stylesheet' />
		<script src='https://api.mapbox.com/mapbox-gl-js/v1.8.1/mapbox-gl.js'></script>

		<script>
			let isTouchDevice = 'ontouchstart' in document.documentElement;
			let circle_colors = {
				total: {
					property: 'total',
					type: 'exponential',
					stops: [
						[1e0, '#ffff00'],
						[1e3, '#ffaa00'],
						[1e6, '#ff6600'],
						[1e9, '#ff0000'],
					]
				},
				dtotal: {
					property: 'dtotal',
					type: 'exponential',
					stops: [
						[1e0, '#ffff00'],
						[1e3, '#ffaa00'],
						[1e6, '#ff6600'],
						[1e9, '#ff0000'],
					]
				},
				deaths: {
					property: 'deaths',
					type: 'exponential',
					stops: [
						[1e0, '#ffaa00'],
						[1e3, '#ff6600'],
						[1e6, '#ff3300'],
						[1e9, '#ff0000'],
					]
				},
				recovered: {
					property: 'recovered',
					type: 'exponential',
					stops: [
						[1e0, 'rgba(0, 255, 0, 0.5)'],
						[1e3, 'rgba(0, 255, 0, 0.75)'],
						[1e6, 'rgba(0, 255, 0, 1)'],
						[1e9, 'rgba(0, 255, 0, 1)'],
					]
				}
			};

			let options = {
				date: "live",
				feature: "total"
			};

			let map = null;
			let popup = new mapboxgl.Popup({
				closeButton: true,
				closeOnClick: true
			});

			function update_feature() {
				let feature = options.feature;
				map.setPaintProperty('cases-layer', 'circle-color', circle_colors[feature]);
				map.setPaintProperty('cases-layer', 'circle-radius', ['*', 2, ['log10', ['get', feature]]]);
			}

			function update_date() {
				let date = options.date;
				map.getSource('cases').setData(`/geojson?date=${date}`);
			}

			{{!-- function popup_html(data) {
				let formatted = `
				<div class="lato infowindow">
					<code><b>${data.name}</b></code><br/>
					<code><b>Total:</b> ${data.total} (+${data.dtotal})</code><br/>
					<code><b>Deaths:</b> ${data.deaths} (+${data.ddeaths})</code><br/>
					<code><b>Recoveries:</b> ${data.recovered} (+${data.drecovered})</code><br/>
				</div>
				`;
				return formatted;
			} --}}

			function init()  {
				mapboxgl.accessToken = 'pk.eyJ1IjoibXlmYXRlbWkwNCIsImEiOiJjazkwZ2podXQwMWtnM21ucGNmOHp0Z2F2In0.ug8iItUIT1dWaoHaYY2B3A';
				map = new mapboxgl.Map({
					container: 'map',
					style: 'mapbox://styles/myfatemi04/ck90gnq0z07ha1iqvvzjfflbm',
					interactive: true,
					center: [0, 0],
					zoom: 1,
					minZoom: 0
				})
				
				map.on('load', () => {
					map.addSource('cases', {
						type: 'geojson',
						data: '/geojson'
					});
					map.addLayer({
						'id': 'cases-layer',
						'type': 'circle',
						'source': 'cases',
						'paint': {
							'circle-color': circle_colors.total,
							'circle-radius': ['*', 2, ['log10', ['get', 'total']]],
							'circle-opacity': 0.8
						}
					});
				});

				let add_popup = (e) => {
					let features = map.queryRenderedFeatures(e.point);
					feature = features[0];
					map.getCanvas().style.cursor = 'pointer';
					popup
						.setLngLat([feature.properties.longitude, feature.properties.latitude])
						.setHTML(popup_html(feature.properties))
						.addTo(map);
				};

				let hide_popup = () => {
					map.getCanvas().style.cursor = '';
					popup.remove();
				};

				$("select[name=map-date]").change(function() {
					options.date = $("select[name=map-date]").val();
					update_date();
				});

				$("select[name=map-feature]").change(function() {
					options.feature = $("select[name=map-feature]").val();
					update_feature();
				});

				$("select#fpsChange").change(function() {
					fps = $("select#fpsChange").val();
				});

				init_dates();
			}

			function init_dates() {
				$.getJSON(
					"/list/dates",
					{},
					(data) => {
						for (let result of data) {
							let datestr = result.entry_date.substring(0, 10)
							$("#date")[0].innerHTML += `<option value="${datestr}">${datestr}</option>`;
						}
					}
				)
			}

			let do_animation = false;
			let fps = 1;

			function set_start_date() {
				let select = $("select[name=map-date]")[0];
				select.selectedIndex = select.options.length-1;
			}

			function start_animation() {
				if (!do_animation) {
					do_animation = true;
					set_start_date();
					animate();
				}
			}

			function animate_now() {
				if (!do_animation) {
					do_animation = true;
					animate();
				}
			}
			
			function generateGeoJSONCircle(center, radius, numSides){
				var points = [],
					degreeStep = 360 / numSides;

				for(var i = 0; i < numSides; i++){
					var gpos = google.maps.geometry.spherical.computeOffset(center, radius, degreeStep * i);
					points.push([gpos.lng(), gpos.lat()]);
				};

				// Duplicate the last point to close the geojson ring
				points.push(points[0]);

				return {
					type: 'Polygon',
					coordinates: [ points ]
				};
			}

			/* recursive function to animate */
			function animate() {
				if (!do_animation) return;
				let select = $("select[name=map-date]")[0];
				if (select.selectedIndex > 0) {
					select.selectedIndex--;
					$("select[name=map-date]").trigger("change");
					setTimeout(
						() => {
							animate();
						},
						1000/fps
					);
				} else {
					do_animation = false;
				}
			}

			function stop_animation() {
				do_animation = false;
			}
		</script>
	</head>
	<body onload="init()">
		{{>navbar}}
		<div class="scroll box">
			<h3>Map</h3>
			Source: BNO News, Worldometers, local government websites. This is <b>not</b> a duplicate of the JHU map.
			<div class="d-flex flex-column">
				<noscript>
					This website requires JavaScript to run.
				</noscript>
				<select name="map-feature" class="custom-input-color form-control my-2">
					<option value="total">Total cases</option>
					<option value="recovered">Recovered cases</option>
					<option value="deaths">Deaths</option>
					<option value="dtotal">24H Change in total cases</option>
				</select>
				<select name="map-date" class="custom-input-color form-control my-2" id="date" >
				</select>
				<div class="column-container">
					<button style="flex: 1;" class="btn custom-button-color mx-1 my-1" id="animate" onclick="animate_now()">
						Start animation from selected date to today
					</button>
					<button style="flex: 1;" class="btn custom-button-color mx-1 my-1" id="animate" onclick="start_animation()">
						Start animation from first day to today
					</button>
					<button style="flex: 1;" class="btn custom-button-color mx-1 my-1" id="stopAnimate" onclick="stop_animation()">
						Stop animation
					</button>
					<select style="flex: 1;" class="custom-input-color form-control my-1" id="fpsChange">
						<option value="4">4x Speed</option>
						<option value="2">2x Speed</option>
						<option value="1" selected>1x Speed</option>
						<option value="0.5">0.5x Speed</option>
						<option value="0.25">0.25x Speed</option>
					</select>
				</div>
			</div>
			<div id="map" class="map my-2"></div>
		</div>
	</body>
</html>
