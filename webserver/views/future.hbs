<!DOCTYPE html>
<html>
	<head>
		<title>Corona Vision - COVID-19 Predictions</title>
		{{>styles}}
		<script src="https://cdn.jsdelivr.net/npm/chart.js@2.9.3/dist/Chart.min.js"></script>
		<script src="/js/chart.min.js"></script>
		<script>
			let country = "{{country}}";
			let province = "{{province}}";
			let county = "{{county}}";
			function init() {
				$("#countrySelector").val(country);
				$("#provinceSelector").val(province);
				$("#countySelector").val(county);
				let chartStyles = {
					responsive: true,
					title: {
						display: true,
						text: "Loading...",
						fontColor: "#f5f5f5",
						fontSize: 30,
						fontFamily: "Lato"
					},
					legend: {
						display: true,
						labels: { fontColor: "#f5f5f5" }
					},
					hover: {
						mode: 'nearest',
						intersect: true
					},
					scales: {
						xAxes: [
							{
								gridLines: { color: "#f5f5f5" },
								ticks: { fontColor: "#f5f5f5" }
							}
						],
						yAxes: [
							{
								gridLines: { color: "#f5f5f5" },
								ticks: { fontColor: "#f5f5f5"}
							}
						]
					}
				};

				let plugins = [{
					beforeDraw: function (chart, easing) {
						var ctx = chart.chart.ctx;

						ctx.save();
						ctx.fillStyle = "#212121";
						ctx.fillRect(0, 0, $("canvas")[0].width, $("canvas")[0].height);
						ctx.restore();
					}
				}];

				let predictionsChartDatasets = {
					labels: [],
					datasets: [
						{
							label: 'Total cases',
							backgroundColor: 'yellow',
							borderColor: 'yellow',
							fill: false,
							data: [],
							lineTension: 0
						},
						{
							label: 'Deaths',
							backgroundColor: 'red',
							borderColor: 'red',
							fill: false,
							data: [],
							lineTension: 0
						},
						{
							label: 'Recovered',
							backgroundColor: 'green',
							borderColor: 'green',
							fill: false,
							data: [],
							lineTension: 0
						},
						{
							label: 'Logistic prediction',
							backgroundColor: 'grey',
							borderColor: 'grey',
							fill: false,
							data: [],
							lineTension: 0,
							hidden: false
						}
					]
				};

				let logisticChart = new Chart($("#predictions-logistic")[0].getContext('2d'), {
					type: 'line',
					data: predictionsChartDatasets,
					plugins: plugins,
					options: chartStyles
				});

				let locationData = {country: "{{country}}", province: "{{province}}", county: "{{county}}"};

				$.getJSON(
					"/cases/totals_sequence",
					locationData,
					(data) => {
						addData(logisticChart, data, locationData);
					}
				);
			}

			function logPredict(fit, x) {
				return fit.MAX/(1 + Math.exp(-(x - fit.T_INF)/fit.T_RISE));
			}

			function addData(chart, data, locationData) {
				let label = locationData.country || "the World";
				if (locationData.province) label = locationData.province + ", " + label;
				if (locationData.county) label = locationData.county + ", " + label;
				chart.options.title.text = "Logistic predictions for " + label;
				let datasets = ['total', 'recovered', 'deaths'];
				for (let i in datasets) {
					chart.data.datasets[i].data = data[datasets[i]];
				}
				$.getJSON(
					"//prediction-dot-tactile-welder-255113.uc.r.appspot.com/predict/log",
					locationData,
					(fit) => {
						chart.data.labels = extendDates(data.entry_date);
						for (let day = 0; day < chart.data.labels.length; day++) {
							chart.data.datasets[3].data.push(logPredict(fit, day));
						}
						chart.update();
					}
				);
			}

			function isoDate(date) {
				if (typeof date == 'string') {
					return date;
				} else {
					return date.toISOString().substring(0, 10);
				}
			}

			function extendDates(dates) {
				let numDays = dates.length;
				let newDates = [...dates];
				let current = dates[numDays - 1];
				if (typeof current == 'string') {
					current = new Date(current);
				}
				for (let i = 0; i < numDays; i++) {
					current.setUTCDate(current.getUTCDate() + 1);
					dates.push(isoDate(current));
				}
				return dates;
			}

			function setCountry() {
				window.location = "?country=" + $("#countrySelector").val() + "&date={{entry_date}}";
			}

			function setProvince() {
				window.location = "?country=" + country + "&province=" + $("#provinceSelector").val() + "&date={{entry_date}}";
			}

			function setCounty() {
				window.location = "?country=" + country + "&province=" + province + "&county=" + $("#countySelector").val() + "&date={{entry_date}}";
			}
		</script>
	</head>
	<body onload="init()">
		{{>navbar}}
		<div class="container p-2">
			<div class="box d-flex flex-column">
                <span class="text-center font-weight-bold">Please note: predictions will not always be accurate, please do not base decisions off of them.</span>
				<canvas id="predictions-logistic"></canvas>
				<div>
					<a href="/charts_info">More info about the charts</a><br/>
					<a href="/disclaimer">Disclaimer about predictions</a>
				</div>
			</div>
			<div class="d-flex flex-column">
				Select a location:
				<select id="countrySelector" class="custom-input-color form-control m-2" onchange="setCountry()">
					<option value="">Worldwide</option>
					{{#each countries}}
						<option value="{{this.country}}">{{this.country}}</option>
					{{/each}}
				</select>
				{{#if provinces}}
					<select id="provinceSelector" class="custom-input-color form-control m-2" onchange="setProvince()">
						<option value="">Nationwide</option>
						{{#each provinces}}
							<option value="{{this.province}}">{{this.province}}</option>
						{{/each}}
					</select>
				{{/if}}
				{{#if counties}}
					<select id="countySelector" class="custom-input-color form-control m-2" onchange="setCounty()">
						<option value="">Statewide</option>
						{{#each counties}}
							<option value="{{this.county}}">{{this.county}}</option>
						{{/each}}
					</select>
				{{/if}}
			</div>
		</div>
	</body>
</html>
