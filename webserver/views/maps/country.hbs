<!DOCTYPE html>
<html>
	<head>
		<title>Corona Vision - Coronavirus Map</title>
		{{>styles}}
		<link rel="stylesheet" href="/css/svgMap.css">
		<script src="https://polyfill.io/v3/polyfill.min.js?features=Element.prototype.classList%2CObject.assign"></script>
		<script src="/js/svgMap.js"></script>
		<script src="/js/map_animate.js"></script>
		<script>
			let colorOptions = {
				total: {
					colorMax: "#cc0000",
					colorMin: "#FFE5D9"
				},
				dtotal: {
					colorMax: "#f7723e",
					colorMin: "#ffd5c4"
				},
				deaths: {
					colorMax: "#d12e2e",
					colorMin: "#faa5a5"
				},
				recovered: {
					colorMax: "#68fc60",
					colorMin: "#eeffed"
				}
			}

			let currentData = {};

			let svg = null;

			// we store this because the date can change
			let feature = "total";

			function setFeature(newFeature) {
				feature = newFeature;
				updateFills();
			}

			function triggerTooltipUpdate() {
				let countryElement = $("path:hover");
				if (countryElement) {
					var stateName = countryElement.attr('title');
					if (stateName) {
						setTooltipInfo(stateName, currentData[stateName]);
					}
				}
			}

			function setDate(date, callback) {
				if (typeof date == "undefined") {
					date = $("#date").val();
				}
				$.getJSON(
					"/api/mapdata",
					{
						date: date,
						map: "{{mapID}}"
					},
					(stateData) => {
						currentData = stateData;
						console.log(currentData);
						updateFills();
						triggerTooltipUpdate();
						if (typeof callback != 'undefined') callback();
					}
				);
			}

			function minMax(array) {
				return {min: Math.min(...array), max: Math.max(...array)}
			}

			function dataMinMax(data, feature) {
				let array = [];
				for (let stateID in data) {
					if (stateID !== '') {
						array.push(data[stateID][feature]);
					}
				}
				return minMax(array);
			}

			function getRatio(min, max, value) {
				return (value - min) / (max - min);
			}

			function getColor(color1, color2, ratio) {
				color1 = color1.slice(-6);
				color2 = color2.slice(-6);
				var r = Math.ceil(parseInt(color1.substring(0, 2), 16) * ratio + parseInt(color2.substring(0, 2), 16) * (1 - ratio));
				var g = Math.ceil(parseInt(color1.substring(2, 4), 16) * ratio + parseInt(color2.substring(2, 4), 16) * (1 - ratio));
				var b = Math.ceil(parseInt(color1.substring(4, 6), 16) * ratio + parseInt(color2.substring(4, 6), 16) * (1 - ratio));
				return '#' + getHex(r) + getHex(g) + getHex(b);
			};

			function getHex(value) {
				value = value.toString(16);
				return ('0' + value).slice(-2);
			};

			function updateFills() {
				let {colorMin, colorMax} = colorOptions[feature];
				let thresMin = 0;
				let thresMax = 0;
				let {min, max} = dataMinMax(currentData, feature);
				thresMin = min;
				thresMax = max;
				$("path").attr("fill", "#212121");
				for (let stateID in currentData) {
					if (stateID) {
						let featureValue = currentData[stateID][feature];
						let featureRatio = getRatio(thresMin, thresMax, featureValue);
						let overallColor = getColor(colorMax, colorMin, featureRatio);
						$(`[title="${stateID}"]`).attr("fill", overallColor);
					}
				}
			}

			function init() {
				loadSVG("/svgmap/{{mapID}}.svg");
			}

			function loadSVG(path) {
				fetch(path).then(
					response => {
						response.text().then(
							text => {
								$("#svgMap").html(text);
								addStateListeners();
								setDate($("#date").val());
							}
						)
					}
				);
			}

			function showTooltip() {
				$("#tooltip").css("display", "flex");
			}

			function generateHTML(label, content) {
				return `
					<div class="trow">
						<div class="font-weight-bold">${label}</div>
						<div>${content || "Unknown"}</div>
					</div>`
			}

			function setTooltipInfo(state, content) {
				let html = '';
				if (content) {
					html += generateHTML("Cases", content.total);
					html += generateHTML("Cases today", content.dtotal);
					html += generateHTML("Deaths", content.deaths);
					html += generateHTML("Recoveries", content.recovered);
				}
				$("#tooltipRows").html(html);
				$("#tooltipState").html(state);
			}

			function hideTooltip() {
				$("#tooltip").css("display", "none");
			}

			function moveTooltip(e) {
				let width = $("#tooltip").width();
				let height = $("#tooltip").height();
				$("#tooltip").css({left: e.pageX - width / 2, top: e.pageY - height - 30})
			}

			function addStateListeners() {
				for (let state of $("#svgMap path")) {
					let stateName = state.getAttribute("title");
					if (typeof stateName != 'undefined') {
						state.addEventListener('mousemove', function(e) {
							moveTooltip(e);
						});
						state.addEventListener('mouseenter', function(e) {
							showTooltip();
							setTooltipInfo(stateName, currentData[stateName]);
						});
						state.addEventListener('mouseleave', function() {
							hideTooltip();
						});
					}
				}

				$("#tooltip").mousemove((e) => {
					moveTooltip(e);
				});
			}
		</script>
		<style>
			#svgMap {
				stroke: #999;
				z-index: -1;
			}
			#mapWrapper {
				text-align: center;
			}
			#svgMap path:hover {
				stroke: #333;
			}
			#tooltip {
				flex-direction: column;
				padding: 0.5em;
				background-color: #f5f5f5;
				z-index: 1;
				color: #212121;
			}
			#tooltip .trow {
				display: flex;
			}
			#tooltip .trow div {
				flex: 1;
				padding: 0 0.5em;
			}
			svg {
				width: auto!important;
				height: auto!important;
			}
		</style>
	</head>
	<body onload="init()">
		{{>navbar}}
		<div class="scroll box">
			<h3>Map</h3>
			Source: Local government websites, ESRI ARCGIS dashboards.<br/>
			<a href="http://mapsvg.com/">Map data from MapSVG.com</a><br/>
			<a href="/maps/heat">Heat Map</a> | <a href="/maps/world">World Map</a> | <b>Country Map</b><br/>
			{{!-- To view this app on a mobile device, download our app! --}}
			<div class="d-flex flex-column">
				<noscript>
					This website requires JavaScript to run.
				</noscript>
				<select name="map-feature" class="custom-input-color form-control my-2" onchange="setFeature(this.value)">
					<option value="total">Total cases</option>
					<option value="recovered">Recovered cases</option>
					<option value="deaths">Deaths</option>
					<option value="dtotal">24H Change in total cases</option>
				</select>
				<select name="map-date" class="custom-input-color form-control my-2" id="date" onchange="setDate(this.value)">
					{{#each entryDates}}
						<option value="{{this}}">{{this}}</option>
					{{/each}}
				</select>
				<div class="column-container">
					<button style="flex: 1;" class="btn custom-button-color mx-1 my-1" onclick="animate_now()">
						Start animation from selected date to today
					</button>
					<button style="flex: 1;" class="btn custom-button-color mx-1 my-1" onclick="start_animation()">
						Start animation from first day to today
					</button>
					<button style="flex: 1;" class="btn custom-button-color mx-1 my-1" onclick="stop_animation()">
						Stop animation
					</button>
					<select style="flex: 1;" class="custom-input-color form-control my-1" onchange="setFps(this.value)">
						<option value="16">4x Speed</option>
						<option value="8">2x Speed</option>
						<option value="4" selected>1x Speed</option>
						<option value="2">0.5x Speed</option>
						<option value="1">0.25x Speed</option>
					</select>
				</div>
			</div>
			<div id="tooltip" style="display: none; position: absolute;">
				<div>
					<span id="tooltipState" class="font-weight-bold"></span>
				</div>
				<div id="tooltipRows">
				</div>
			</div>
			<div id="mapWrapper" style="position: relative; width: 100%; height: 100%;">
				<h1>Map of {{label}}</h1>
				<div id="svgMap"
				{{!-- style="height: 30em;" --}}
				>
				</div>
			</div>
		</div>
	</body>
</html>
