<!DOCTYPE html>
<html>
	<head>
		<title>Corona Vision - Coronavirus Map</title>
		{{>styles}}
		<link rel="stylesheet" href="/css/svgMap.css">
		<script src="https://polyfill.io/v3/polyfill.min.js?features=Element.prototype.classList%2CObject.assign"></script>
		<script src="/js/svgMap.js"></script>
		<script src="/js/map_animate.js"></script>
		<script src="/js/svg-pan-zoom.min.js"></script>
		<script>
			let colorOptions = {
				total: {
					colorMax: "#cc0000",
					colorMin: "#FFE5D9"
				},
				dtotal: {
					colorMax: "#f7723e",
					colorMin: "#ffd5c4"
				},
				deaths: {
					colorMax: "#d12e2e",
					colorMin: "#faa5a5"
				},
				recovered: {
					colorMax: "#68fc60",
					colorMin: "#eeffed"
				}
			}

			let relatedMaps = [
				{{#each relatedMaps}}
					"{{this}}",
				{{/each}}
			];

			let subregions = {};
			let overall = {};
			let svgZoomObject = null;
			let country = "{{country}}";
			let province = "{{province}}";

			// we store this because the date can change
			let feature = "total";

			function setFeature(newFeature) {
				feature = newFeature;
				updateFills();
			}

			function triggerTooltipUpdate() {
				let countryElement = $("path:hover");
				if (countryElement) {
					var subregionName = countryElement.attr('title');
					if (subregionName) {
						setTooltipInfo(subregionName, subregions[subregionName]);
					}
				}
			}

			function setDate(date, callback) {
				if (typeof date == "undefined") {
					date = $("#date").val();
				}
				$.getJSON(
					"/api/mapdata",
					{
						date: date,
						country: country,
						province: province,
					},
					(data) => {
						subregions = data.subregions;
						overall = data.overall;
						updateFills();
						triggerTooltipUpdate();
						$("#dateHead").html(date);
						if (typeof callback != 'undefined') callback();
					}
				);
			}

			function minMax(array) {
				return {min: Math.min(...array), max: Math.max(...array)}
			}

			function dataMinMax(data, feature) {
				let array = [];
				for (let subregionID in data) {
					if (subregionID !== '') {
						array.push(data[subregionID][feature]);
					}
				}
				return minMax(array);
			}

			function getRatio(min, max, value) {
				return (value - min) / (max - min);
			}

			function getColor(color1, color2, ratio) {
				color1 = color1.slice(-6);
				color2 = color2.slice(-6);
				var r = Math.ceil(parseInt(color1.substring(0, 2), 16) * ratio + parseInt(color2.substring(0, 2), 16) * (1 - ratio));
				var g = Math.ceil(parseInt(color1.substring(2, 4), 16) * ratio + parseInt(color2.substring(2, 4), 16) * (1 - ratio));
				var b = Math.ceil(parseInt(color1.substring(4, 6), 16) * ratio + parseInt(color2.substring(4, 6), 16) * (1 - ratio));
				return '#' + getHex(r) + getHex(g) + getHex(b);
			};

			function getHex(value) {
				value = value.toString(16);
				return ('0' + value).slice(-2);
			};

			function updateFills() {
				let {colorMin, colorMax} = colorOptions[feature];
				let thresMin = 0;
				let thresMax = 0;
				let {min, max} = dataMinMax(subregions, feature);
				thresMin = min;
				thresMax = max;
				$("path").attr("fill", "#212121");
				for (let subregionID in subregions) {
					let featureValue = subregions[subregionID][feature];
					let featureRatio = getRatio(thresMin, thresMax, featureValue);
					if (featureRatio > 0) {
						let overallColor = getColor(colorMax, colorMin, featureRatio);
						let found = $(`[title="${subregionID}"]`);
						if (found.length > 0) {
							found.attr("fill", overallColor);
						} else {
							console.error("Warning: County not found: ", subregionID);
						}
					}
				}
			}

			function init() {
				$(window).resize(
					() => {
						$("#pageContent").height($(window).height() - $("#header").height());
						$("#svgMap").height($("#mapWrapper").height() - $("#mapHeader").height());
						console.log($("#svgMap").height());
						$("svg").width($("#svgMap").width());
						$("svg").height($("#svgMap").height());
					}
				);
				$(window).trigger('resize');
				if (!country) loadSVG(`/svgmap/world.svg`);
				else if (!province) loadSVG(`/svgmap/${country}.svg`);
				else loadSVG(`/svgmap/${country}/${province}.svg`);
			}

			function loadSVG(path) {
				fetch(path).then(
					response => {
						response.text().then(
							text => {
								$("#svgMap").html(text);
								addSubregionListeners();
								setDate($("#date").val(), resetTooltip);
								svgZoomObject = svgPanZoom('svg', {
									dblClickZoomEnabled: false,
									zoomScaleSensitivity: 0.5
								});
								$(window).trigger('resize');
							}
						)
					}
				);
			}
			
			function resetTooltip() {
				setTooltipInfo('{{label}}', overall)
			}

			function generateHTML(label, content) {
				return `
					<div class="trow">
						<div class="font-weight-bold">${label}</div>
						<div>${content || "Unknown"}</div>
					</div>`
			}

			function setTooltipInfo(subregion, content) {
				let html = '';
				if (content) {
					html += generateHTML("Cases", content.total);
					html += generateHTML("Cases today", content.dtotal);
					html += generateHTML("Deaths", content.deaths);
					html += generateHTML("Recoveries", content.recovered);
					if (relatedMaps.includes(subregion)) {
						html += `<a href="/maps/${country?country+"/":""}${subregion}">Click for map of ${subregion}</a>`;
					}
				} else {
					html += '<i>No data found</i>';
				}
				$("#tooltipRows").html(html);
				$("#tooltipSubregion").html(subregion);
			}

			function addSubregionListeners() {
				// 'path' tags are for countries
				// #svgMap is triggered even if you aren't directly tapping it
				$("#svgMap")[0].addEventListener('touchend', function(e) {
					if (e.path[0].tagName != 'path') {
						resetTooltip();
					}
				});
				$("#svgMap")[0].addEventListener('click', function(e) {
					if (e.path[0].tagName != 'path') {
						resetTooltip();
					}
				});
				for (let subregion of $("#svgMap path")) {
					let subregionName = subregion.getAttribute("title");
					if (typeof subregionName != 'undefined') {
						subregion.addEventListener('touchend', function(e) {
							setTooltipInfo(subregionName, subregions[subregionName]);
						});
						subregion.addEventListener('click', function(e) {
							setTooltipInfo(subregionName, subregions[subregionName]);
						});
					}
				}
			}
		</script>
		<style>
			html, body {
				height: 100%;
				width: 100%;
			}
			#svgMap {
				stroke: #999;
				stroke-width: 0.5px;
				z-index: -1;
			}
			#mapWrapper {
				text-align: center;
			}
			#svgMap path:hover {
				stroke: #333;
			}
			#tooltip {
				flex-direction: column;
				padding: 0.5em;
			}
			#tooltip .trow {
				display: flex;
			}
			#tooltip .trow div {
				flex: 1;
				padding: 0 0.5em;
			}
			#sidebar {
				overflow-y: auto;
			}
		</style>
	</head>
	<body onload="init()">
		<div id="header">
			{{>navbar}}
		</div>
		<div class="column-container" id="pageContent">
			<div id="sidebar" class="d-flex flex-column p-2" style="flex: 1; border-right: 1px solid #f5f5f5;">
				<div id="tooltip">
					<div>
						<span id="tooltipSubregion" class="font-weight-bold"></span>
					</div>
					<div id="tooltipRows">
					</div>
				</div>
				<noscript>
					This website requires JavaScript to run.
				</noscript>
				<select name="map-feature" class="custom-input-color form-control my-2" onchange="setFeature(this.value)">
					<option value="total">Total cases</option>
					<option value="recovered">Recovered cases</option>
					<option value="deaths">Deaths</option>
					<option value="dtotal">24H Change in total cases</option>
				</select>
				<select name="map-date" class="custom-input-color form-control my-2" id="date" onchange="setDate(this.value)">
					{{#each entryDates}}
						<option value="{{this}}">{{this}}</option>
					{{/each}}
				</select>
				<div class="d-flex flex-column">
					<button class="btn custom-button-color my-2" onclick="animate_now()">
						Animate from selected date to today
					</button>
					<button class="btn custom-button-color my-2" onclick="start_animation()">
						Animate from first day to today
					</button>
					<button class="btn custom-button-color my-2" onclick="stop_animation()">
						Pause animation
					</button>
					<select class="custom-input-color form-control my-2" onchange="setFps(this.value)">
						<option value="16">4x Speed</option>
						<option value="8">2x Speed</option>
						<option value="4" selected>1x Speed</option>
						<option value="2">0.5x Speed</option>
						<option value="1">0.25x Speed</option>
					</select>
				</div>
				
				<div style="border-top: 1px solid #f5f5f5;">
					<b>Related maps</b>
					<ul>
						{{#if country}}
							<li>
								<a href="/maps/world">World Map</a>
							</li>
						{{/if}}
						{{#if province}}
							<li>
								<a href="/maps/{{country}}">{{country}} Map</a>
							</li>
						{{/if}}
						{{#each relatedMaps}}
							<li>
								<a href="/maps/{{#if ../country}}{{../country}}/{{/if}}{{this}}">{{this}}</a>
							</li>
						{{/each}}
					</ul>
				</div>
			</div>
			<div id="mapWrapper" style="flex: 4;">
				<div id="mapHeader" class="text-center" style="border-bottom: 1px solid #f5f5f5;">
					<h1 style="margin: 0;">Map of {{label}}</h1>
					Source: Local government websites, ESRI ARCGIS dashboards.<br/>
					<a href="http://mapsvg.com/">Map data from MapSVG.com</a><br/>
					<span class="font-italic" id="dateHead"></span>
				</div>
				<div id="svgMap"></div>
			</div>
		</div>
	</body>
</html>
